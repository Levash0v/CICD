import sqlite3
import requests
import os
from dotenv import load_dotenv
from datetime import datetime
from binance.client import Client
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup

load_dotenv()
api_token = os.getenv('API_TOKEN')
bot = Bot(token=api_token)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

AV_API = os.getenv('AV_API_KEY')
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance API –∫–ª–∏–µ–Ω—Ç–∞
client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('./app_data/database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT
)
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS portfolio (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    asset_name TEXT,
    amount REAL,
    asset_type TEXT, -- 'currency', 'crypto', 'stock'
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')
conn.commit()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    # –ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    keyboard.add(KeyboardButton('–ü–æ—Ä—Ç—Ñ–µ–ª—å'), KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤'))
    # –í—Ç–æ—Ä–∞—è –ª–∏–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    keyboard.row(
        KeyboardButton('üíµ–í–∞–ª—é—Ç–∞'),
        KeyboardButton('üí∏–ö—Ä–∏–ø—Ç–æ'),
        KeyboardButton('üìà–ê–∫—Ü–∏–∏')
    )
    return keyboard

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –º–µ—Ç–æ–¥ row() –≤–º–µ—Å—Ç–æ add()
def asset_type_inline_keyboard():
    inline_kb = InlineKeyboardMarkup()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 
    inline_kb.row(
        InlineKeyboardButton("üí∏–ö—Ä–∏–ø—Ç–æ", callback_data='crypto'),
        InlineKeyboardButton("üíµ–í–∞–ª—é—Ç–∞", callback_data='currency'),
        InlineKeyboardButton("üìà–ê–∫—Ü–∏–∏", callback_data='stock')
    )
    return inline_kb

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class CurrencyState(StatesGroup):
    waiting_for_asset = State()
    response = State()
class PriceState(StatesGroup):
    waiting_for_asset = State()
class StockState(StatesGroup):
    waiting_for_asset = State()
class Portfolio(StatesGroup):
    waiting_for_asset_type = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞
    waiting_for_asset_ticker = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
    waiting_for_amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞
@dp.callback_query_handler(lambda c: c.data in ['crypto', 'currency', 'stock'], state=Portfolio.waiting_for_asset_type)
async def process_asset_choice(callback_query: types.CallbackQuery, state: FSMContext):
    asset_type = callback_query.data
    await state.update_data(asset_type=asset_type)
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {asset_type.capitalize()}. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, USD, IBM")
    await callback_query.answer()
    await Portfolio.waiting_for_asset_ticker.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
def get_currency_rate(currency: str):
    response = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
    return response.json()['Valute']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def get_crypto_rate(crypto: str):
    crypto = crypto+'USDT'
    try:
        response = client.get_symbol_ticker(symbol=crypto)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
        price = response.get('price')
        if price:
            return float(price)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π
        else:
            return "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    except Exception as e:
        return str(e)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∞–∫—Ü–∏–π
def get_stock_rate(stock: str):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API, –Ω–∞–ø—Ä–∏–º–µ—Ä, Alpha Vantage
        response = requests.get(f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={stock}&apikey=P{AV_API}')
        data = response.json()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if "Time Series (Daily)" in data:
            time_series = data['Time Series (Daily)']
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (—ç—Ç–æ –±—É–¥–µ—Ç —Å–∞–º–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞)
            latest_time = sorted(time_series.keys(), reverse=True)[0]
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–π –º–µ—Ç–∫–∏
            return time_series[latest_time]['4. close']
        else:
            return "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç 'Time Series (Daily)'"
    except Exception as e:
        return str(e)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π.",
        reply_markup=main_menu_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    )

# –ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = ('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π.')
    await message.reply(help_text, reply_markup=main_menu_keyboard())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–æ–π /help

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
@dp.message_handler(Text(equals="üíµ–í–∞–ª—é—Ç–∞", ignore_case=True))
async def currency_command(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR, CNY):")
    await CurrencyState.waiting_for_asset.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞

@dp.message_handler(state=CurrencyState.waiting_for_asset)
async def crypto_command(message: types.Message, state: FSMContext):
    ticker = message.text.strip().upper()
    rates = get_currency_rate(ticker)
    if ticker in rates:
        value = rates[ticker]['Value']
        name = rates[ticker]['Name']
        nominal = rates[ticker]['Nominal']
        await message.reply(f"–ö—É—Ä—Å {ticker}: {value} –†—É–±–ª–µ–π –∑–∞ {nominal} {name}")
    else:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@dp.message_handler(Text(equals="üí∏–ö—Ä–∏–ø—Ç–æ", ignore_case=True))
async def start_crypto_process(message: types.Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: btcusdt")
    await PriceState.waiting_for_asset.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ç–∏–∫–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=PriceState.waiting_for_asset)
async def crypto_command(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    crypto = message.text.strip().upper()
    rate = get_crypto_rate(crypto)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å
    if isinstance(rate, float):
        await message.reply(f"–ö—É—Ä—Å {crypto.upper()}: {rate}")
    else:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {rate}")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∞–∫—Ü–∏–π
@dp.message_handler(Text(equals="üìà–ê–∫—Ü–∏–∏", ignore_case=True))
async def start_price_process(message: types.Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: ibm")
    await StockState.waiting_for_asset.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞

@dp.message_handler(state=StockState.waiting_for_asset)
async def stock_command(message: types.Message, state: FSMContext):
    stock = message.text.strip().upper()
    rate = get_stock_rate(stock)
    if rate:
        await message.reply(f"–ö—É—Ä—Å –∞–∫—Ü–∏–∏ {stock}: {rate} USD")
    else:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∞–∫—Ü–∏–π.")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
@dp.message_handler(Text(equals="–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤", ignore_case=True))
async def add_to_portfolio(message: types.Message, state: FSMContext):
    await state.set_state(Portfolio.waiting_for_asset_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=asset_type_inline_keyboard())
    # await Portfolio.waiting_for_asset_type.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞
@dp.message_handler(Text(equals=["–ö—Ä–∏–ø—Ç–æ", "üíµ–í–∞–ª—é—Ç–∞", "–ê–∫—Ü–∏–∏"], ignore_case=True), state=Portfolio.waiting_for_asset_type)
async def process_asset_type(message: types.Message, state: FSMContext):
    asset_type = message.text.lower()
    await state.update_data(asset_type=asset_type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–∞
    await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {asset_type}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞:")
    await state.set_state(Portfolio.waiting_for_asset_ticker)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ç–∏–∫–µ—Ä–∞
@dp.message_handler(state=Portfolio.waiting_for_asset_ticker)
async def process_asset_ticker(message: types.Message, state: FSMContext):
    asset_ticker = message.text.upper()
    await state.update_data(asset_ticker=asset_ticker)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞
    await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {asset_ticker}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10.5")
    await Portfolio.waiting_for_amount.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message_handler(state=Portfolio.waiting_for_amount)
async def process_asset_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        user_data = await state.get_data()
        asset_type = user_data['asset_type']
        asset_ticker = user_data['asset_ticker']
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–∞
        asset_exists = False
        current_price = None

        if asset_type == 'crypto':
            current_price = get_crypto_rate(asset_ticker)
            if isinstance(current_price, float):
                asset_exists = True
        elif asset_type == 'currency':
            rates = get_currency_rate(asset_ticker)
            if asset_ticker in rates:
                asset_info = rates[asset_ticker]
                nominal = asset_info['Nominal']
                current_price = asset_info['Value'] / nominal
                asset_exists = True
        elif asset_type == 'stock':
            current_price = get_stock_rate(asset_ticker)
            if isinstance(current_price, str) and current_price.startswith("–û—à–∏–±–∫–∞"):
                asset_exists = False
            else:
                asset_exists = True
        
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not asset_exists:
            await message.reply(f"–ê–∫—Ç–∏–≤ {asset_ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞.")
            await state.finish()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∞–∫—Ç–∏–≤–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT amount FROM portfolio
            WHERE user_id = ? AND asset_name = ? AND asset_type = ?
        ''', (user_id, asset_ticker, asset_type))
        result = cursor.fetchone()

        if result:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            new_amount = result[0] + amount
            cursor.execute('''
                UPDATE portfolio
                SET amount = ?
                WHERE user_id = ? AND asset_name = ? AND asset_type = ?
            ''', (new_amount, user_id, asset_ticker, asset_type))
            conn.commit()
            await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {asset_ticker} –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_amount}.")
        else:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute('''
                INSERT INTO portfolio (user_id, asset_name, amount, asset_type)
                VALUES (?, ?, ?, ?)
            ''', (user_id, asset_ticker, amount, asset_type))
            conn.commit()
            await message.reply(f"{asset_ticker} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {amount} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {str(e)}")
    finally:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –∞–∫—Ç–∏–≤–æ–≤
@dp.message_handler(Text(equals="–ü–æ—Ä—Ç—Ñ–µ–ª—å", ignore_case=True))
async def portfolio_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT asset_name, amount, asset_type FROM portfolio WHERE user_id = ?', (user_id,))
    assets = cursor.fetchall()

    if assets:
        portfolio_info = []
        for asset_name, amount, asset_type in assets:
            current_price = None
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            if asset_type == 'crypto':
                try:
                    current_price = get_crypto_rate(f"{asset_name}")
                except Exception as e:
                    current_price = f"–û—à–∏–±–∫–∞: {str(e)}"
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –≤–∞–ª—é—Ç—ã
            elif asset_type == 'currency':
                rates = get_currency_rate(asset_name)
                if asset_name in rates:
                    currency_info = rates[asset_name]
                    nominal = currency_info['Nominal']
                    value = currency_info['Value']
                    current_price = value / nominal  # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã
                else:
                    current_price = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞"
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ü–∏–π
            elif asset_type == 'stock':
                current_price = get_stock_rate(asset_name)
                if not current_price:
                    current_price = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã"
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –µ–≥–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
            if isinstance(current_price, float):
                total_value = amount * current_price
                portfolio_info.append(
                    f"{asset_name} - –ö–æ–ª-–≤–æ: {amount}, –¶–µ–Ω–∞: {current_price:.2f} USD, –ò—Ç–æ–≥–æ: {total_value:.2f} USD"
                )
            else:
                portfolio_info.append(
                    f"{asset_name} - –ö–æ–ª-–≤–æ: {amount}, –¶–µ–Ω–∞: {current_price}"
                )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        await message.reply(f"–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:\n" + "\n".join(portfolio_info))
    else:
        await message.reply("–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –∞–∫—Ç–∏–≤—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
